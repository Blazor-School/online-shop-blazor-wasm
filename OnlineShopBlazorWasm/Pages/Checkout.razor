@page "/check-out"
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<div>Products in cart:</div>
<div class="d-flex flex-column">
    @foreach (var product in ProductsInCart)
    {
        <ProductDetail Product="product" ShowBuyButton="false"></ProductDetail>
    }
</div>

<EditForm Model="CheckoutInfo" OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div>
        <label class="col-form-label" for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="CheckoutInfo.Name"></InputText>
        <ValidationMessage class="form-control" For="()=>CheckoutInfo.Name"></ValidationMessage>
    </div>

    <div>
        <label class="col-form-label" for="address">Address:</label>
        <InputText id="address" class="form-control" @bind-Value="CheckoutInfo.Address"></InputText>
        <ValidationMessage class="form-control" For="()=>CheckoutInfo.Address"></ValidationMessage>
    </div>

    <div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>

@code {
    private CheckoutInfo CheckoutInfo = new();
    private List<Product> ProductsInCart = new();

    protected override async Task OnInitializedAsync()
    {
        ProductsInCart = await HttpClient.GetFromJsonAsync<List<Product>>("api/Cart/GetCartItems");
    }

    private async Task SubmitAsync()
    {
        await JsRuntime.InvokeVoidAsync("alert", $"Thank you {CheckoutInfo.Name}, we will deliver to {CheckoutInfo.Address}.");
    }
}
